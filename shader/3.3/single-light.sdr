#version 330
#extension GL_ARB_uniform_buffer_object : require

uniform vec4 eyePosition;
uniform vec3 ambient;
uniform vec4 light_pos;

uniform vec3 lightColor = vec3(1.0, 1.0, 1.0);


vec3 specular(vec4 objPosition, vec3 normal, vec3 lightVector, float gloss, vec3 color) {
    vec3 lightReflect = reflect(lightVector, normal);

    vec3 eyeVector = normalize(objPosition.xyz - eyePosition.xyz);

    color = dot(eyeVector, lightReflect) * color;
    color = clamp(color, 0.0, 1.0);
    color = pow(color, vec3(gloss, gloss, gloss));

    return color;
}

vec3 diffuse(vec3 lightVector, vec4 normal, vec3 color) {
    return clamp(color * dot(normal.xyz, lightVector), 0.0, 1.0);
}

float attenuation(float distance, float dmin, float dmax) {
    if (distance <= dmin) {
        return 1.0;
    } else if (distance <= dmax) {
        //Between dmin and dmax
        return (dmax - distance) / (dmax - dmin); 
    } else {
        return 0.0;
    }
}

vec3 light(vec4 objPosition, vec4 objNormal, float gloss, vec3 specularColor, vec3 diffuseColor) {
    vec3 lightVector = light_pos.xyz - objPosition.xyz;
    float lightDistance = length(light_pos - objPosition);
    lightVector.xyz /= lightDistance;

    vec3 diffuseLight = diffuse(lightVector, objNormal, lightColor);
    vec3 specularLight = specular(objPosition, objNormal.xyz, lightVector, gloss, lightColor);
    float lightAtten = attenuation(lightDistance, 0.0, 6.0);

    vec3 color = (lightAtten * specularLight) * specularColor;
    color += (lightAtten * diffuseLight) * diffuseColor;
    color += ambient * diffuseColor;

    return color;
}

