#version 330
#extension GL_ARB_uniform_buffer_object : require

uniform vec4 eyePosition;

layout (std140) uniform SingleLight {
    vec4 position;
    vec3 color;
    vec3 ambient;
} lightData;

vec4 debug_position() {
    return lightData.position;
}

vec3 specular(vec4 objPosition, vec3 normal, vec3 lightVector, float gloss, vec3 color) {
    vec3 lightReflect = reflect(lightVector, normal);

    vec3 eyeVector = normalize(objPosition.xyz - eyePosition.xyz);

    color = dot(eyeVector, lightReflect) * color;
    color = clamp(color, 0.0, 1.0);
    color = pow(color, vec3(gloss, gloss, gloss));

    return color;
}

vec3 diffuse(vec3 lightVector, vec4 normal, vec3 color) {
    return clamp(color * dot(normal.xyz, lightVector), 0.0, 1.0);
}

float attenuation(float distance, float dmin, float dmax) {
    if (distance <= dmin) {
        return 1.0;
    } else if (distance <= dmax) {
        //Between dmin and dmax
        return (dmax - distance) / (dmax - dmin); 
    } else {
        return 0.0;
    }
}

vec3 light(vec4 objPosition, vec4 objNormal, float gloss, vec3 specularColor, vec3 diffuseColor) {
    vec3 lightVector = lightData.position.xyz - objPosition.xyz;
    float lightDistance = length(lightData.position - objPosition);
    lightVector.xyz /= lightDistance;

    vec3 diffuseLight = diffuse(lightVector, objNormal, lightData.color);
    vec3 specularLight = specular(objPosition, objNormal.xyz, lightVector, gloss, lightData.color);
    float lightAtten = attenuation(lightDistance, 0.0, 6.0);

    vec3 color = (lightAtten * specularLight) * specularColor;
    color += (lightAtten * diffuseLight) * diffuseColor;
    color += lightData.ambient * diffuseColor;
    //color += diffuseColor;

    return color;
}

